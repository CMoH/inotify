%%%-------------------------------------------------------------------
%%% Created : 28 Jan 2010 by Mats Cronqvist <masse@kreditor.se>
%%% Converted to an OTP application by Sven Heyll <sven.heyll@gmail.com>
%%%
%%% @doc
%%% Application that monitors files via Linux `inotify'.
%%% @end
%%%-------------------------------------------------------------------

-module(inotify).

-behaviour(application).
-behaviour(supervisor).

%% API
-export([watch/2, watch/3, unwatch/1, add_handler/3]).

%% Application callbacks
-export([start/2, stop/1]).

%% Supervisor callbacks
-export([init/1]).

-export_type([mask/0, msg/0]).

-define(SERVER, inotify_server).
-define(EVENT, inotify_evt).

-include("inotify.hrl").

-type msg() :: ?inotify_msg(Mask :: [mask()],
                            Cookie :: non_neg_integer(),
                            OptionalName :: string()).
%% A file monitoring message.

-type mask() :: ?ALL           |
                ?ACCESS        |
                ?ATTRIB        |
                ?CLOSE_WRITE   |
                ?CLOSE_NOWRITE |
                ?CLOSE         |
                ?CREATE        |
                ?DELETE        |
                ?DELETE_SELF   |
                ?MODIFY        |
                ?MOVE_SELF     |
                ?MOVED_FROM    |
                ?MOVED_TO      |
                ?MOVE          |
                ?OPEN          |
                ?DONT_FOLLOW   |
                ?MASK_ADD      |
                ?ONLYDIR.
%% The type of a file monitoring event.

%%%===================================================================
%%% API
%%%===================================================================

%%--------------------------------------------------------------------
%% @doc
%% Add a file/directory monitor for all file events. Events for the
%% file/directory will be published via a {@link inotify_evt}. The events
%% resulting from this call will contain `EventTag'.
%% @see inotify:add_handler/3
%% @end
%%--------------------------------------------------------------------
-spec watch(string(), term()) ->
                   ok.
watch(File, EventTag) ->
    inotify_server:watch(File, EventTag).

%%--------------------------------------------------------------------
%% @doc
%% Add a file/directory monitor for specific events.  This differs from {@link
%% watch/2} by the additional `mask' argument.  Calling {@link watch/2} is
%% equivalant to calling {@link watch/3} with `?ALL' as third parameter.
%% @end
%%--------------------------------------------------------------------
-spec watch(string(), term(), mask() | [mask()]) ->
                   ok.
watch(File, EventTag, Mask) ->
    inotify_server:watch(File, EventTag, Mask).

%%--------------------------------------------------------------------
%% @doc
%% Remove a monitor added via {@link watch/2}, `EventTag' identifies the
%% monitor.
%% @end
%%--------------------------------------------------------------------
-spec unwatch(term()) ->
                     ok.
unwatch(EventTag) ->
    inotify_evt:unwatch(EventTag),
    inotify_server:unwatch(EventTag).

%%--------------------------------------------------------------------
%% @doc
%% Add an event handler that receives all events generated by a file monitor
%% identified by a tag that was passed to {@link inotify:watch/2}. When an event
%% occurs for `EventTag' the handler will call `Module:inotify_event(Arg,
%% EventTag, Msg)' as defined by the `callback' definition in the module {@link
%% inotify_evt}.
%%
%% The `Msg' parameter of the callback function should be pattern-matched
%% with the macro `?inotify_msg(Mask, Cookie, OptionalName)' contained
%% in `include/inotify.hrl'.
%%
%% `Mask' is a list of atoms describing the nature of the event. Refer to the
%% Linux inotify man page for a detailed description.
%%
%% `Cookie' is 0 except when a file is moved, where it is used to identify
%% `move_from' and `move_to' events belonging to the same move-operation.
%%
%% `OptionalName' contains the relative file name when monitoring whole
%% directories. E.g. when monitoring "/tmp" the following event might be
%% created when opening "/tmp/xxx": `?inotify_msg([open], 0, "xxx")'.
%% @end
%%--------------------------------------------------------------------
add_handler(EventTag, Module, Arg) ->
    inotify_evt:add_handler(EventTag, Module, Arg).

%%%===================================================================
%%% Application callbacks
%%%===================================================================

%%--------------------------------------------------------------------
%% @private
%%--------------------------------------------------------------------
start(_StartType, _StartArg) ->
    supervisor:start_link(?MODULE, []).

%%--------------------------------------------------------------------
%% @private
%%--------------------------------------------------------------------
stop(_) ->
    ok.

%%%===================================================================
%%% supervisor callbacks
%%%===================================================================

%%--------------------------------------------------------------------
%% @private
%%--------------------------------------------------------------------
init([]) ->
  {ok, {{one_for_all, 1, 1},
        [{?EVENT,  {?EVENT, start_link, []},
          permanent, 2000, worker, [?EVENT]},
         {?SERVER, {?SERVER, start_link, []},
          permanent, 2000, worker, [?SERVER]}]}}.
